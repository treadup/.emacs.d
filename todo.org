* Custom find-file with selectable default location
I have multiple long path names that I want to open files in.
Have some kind of menu where one selects the start location.
Have it use something like getche in C. In other words you do
not have to press enter.

Once you know where you should start.


Perhaps not change the default folder in Emacs.

https://howardism.org/Technical/Emacs/alt-completing-read.html

https://www.masteringemacs.org/article/understanding-minibuffer-completion

(icomplete-mode 1)

(icomplete-vertical-mode 1)

(fido-mode 1)
(fido-vertical-mode 1)

(let ((choices '("First" "Second" "Third" "Three")))
  (completing-read "Choose: " choices))

Here is the solution to this problem.

(defvar bookmarks-directory "~/code/python/personal-website/website/templates/website/bookmarks")

(let ((default-directory bookmarks-directory))
  (call-interactively #'find-file))


* Make Eglot respect the current virtual environment
You can execute python using the following command to start pyls.

    python -m pyls

This is the root of the virtualenv.
    python-shell-virtualenv-root

python-shell-calculate-exec-path
python-shell-calculate-process-environment
python-shell-process-environment

* Eslint
Eslint for .js and .jsx files.
* Jump to definition
Find a way to jumping to a definition.

One person recommends using the following setup.
 global + gtags + pygments

Another package that I have seen recommended is dumbjump.
https://github.com/jacktasia/dumb-jump

Or just use plain etags and Emacs tags for this.

* iedit
Learn how to use iedit.
* Origami
Code folding using origami.
https://github.com/gregsexton/origami.el

* Python shell
There are three things that we could do.

1. run-python
2. Switch to python shell
3. Send buffer to python shell

C-c C-p
C-c C-c
C-c C-z

* Python code editing
Using python mode better.

* Refactoring in Emacs
Figure out how people refactor code in Emacs.

How do I make larger scale changes to a code base? Do people usually
run programs that modify the buffer?

How do people deal with modifying all files in a project.

* Ediff
Figure out how to use Ediff
* Edebug
Figure out how to use Edebug
* Emerge
Figure out the emerge tool.

* Smerge
This is a simpler way of merging files.

It seems that smerge-mode comes builtin with Emacs.

And it seems to be really good.

* Tangle
Literate programming in Emacs with tangle.

* Tramp hangs
Tramp seems to hang alot on macOS. Figure out why this is happening.

I have seen some people commenting on that this might be due to the
exec-path-from-shell package.

* Emmet mode
Emmet mode for editing web pages.
* Web mode
Figure out how to use web mode better.
* Text processing in Emacs
http://ergoemacs.org/emacs/elisp_text_processing_lang.html
http://ergoemacs.org/emacs/elisp_batch_html_tag_transform_bold.html
http://ergoemacs.org/emacs/elisp_fix_dead_links.html
http://ergoemacs.org/emacs/elisp_text-soup_automation.html
http://ergoemacs.org/emacs/elisp_process_html.html
* Markdown mode key bindings
Learn the keybindings for markdown mode.
https://jblevins.org/projects/markdown-mode/
* Occur mode
Make better use of occur mode and multi occur mode.

The multi-occur-in-this-mode function looks interesting.

https://www.masteringemacs.org/article/searching-buffers-occur-mode
* Whitespace manipulation commands
C-x C-o (delete-blank-lines), delete-trailing-whitespace, tabify and
untabify, indent-region, and so on.
* Dired
Learn to use Dired.
* Text navigation
The following quote is from the Effective Emacs article.

Effortless navigation: re-bind a few keys so that you can move the
cursor in any direction, by chars or words, by holding down Alt and
just pressing various letter keys.

* Working with archives
browsing and editing archives: tar, gzip, zip, jar, etc. Most people
have no idea this feature exists, and it's nothing short of amazing.
